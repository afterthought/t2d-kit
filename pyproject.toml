[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "t2d-kit"
version = "1.8.0"
description = "Transform requirements into beautiful diagrams and documentation using self-organizing agents"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "T2D Kit Team", email = "team@t2d-kit.dev"}
]
keywords = ["diagrams", "documentation", "claude", "ai", "agents", "d2", "mermaid", "plantuml"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Multimedia :: Graphics",
]
dependencies = [
    "click>=8.1.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "toml>=0.10.2",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-PyYAML>=6.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "pre-commit>=3.4.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/t2d-kit/t2d-kit"
Documentation = "https://t2d-kit.dev"
Repository = "https://github.com/t2d-kit/t2d-kit"
Issues = "https://github.com/t2d-kit/t2d-kit/issues"

[project.scripts]
t2d = "t2d_kit.cli.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/t2d_kit"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=7.0",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.hatch
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long - handled by black
    "B008", # do not perform function calls in argument defaults
    "E402", # module level import not at top of file (needed for circular imports)
    "F401", # imported but unused (some imports are for side effects)
    "SIM102", # use single if instead of nested if
    "B028", # no explicit stacklevel (warnings)
]

[tool.ruff.lint.isort]
known-first-party = ["t2d_kit"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S105", "S106"]