[tools]
claude = "latest"
"pipx:git+https://github.com/github/spec-kit.git" = "latest"

python = "3.11"
node = "20"
go = "1.21"
java = "openjdk-17"
"npm:@mermaid-js/mermaid-cli" = "latest"
"go:oss.terrastruct.com/d2" = "latest"

[tasks.setup-plantuml]
description = "Download and setup PlantUML"
run = """
mkdir -p ~/.local/bin
curl -L https://github.com/plantuml/plantuml/releases/download/v1.2024.0/plantuml-1.2024.0.jar -o ~/.local/bin/plantuml.jar
echo '#!/bin/bash\njava -jar ~/.local/bin/plantuml.jar "$@"' > ~/.local/bin/plantuml
chmod +x ~/.local/bin/plantuml
"""

[tasks.install-deps]
description = "Install Python dependencies including dev tools"
run = "pip install -e '.[dev]'"

[tasks.setup]
description = "Complete project setup"
depends = ["setup-plantuml", "install-deps"]
run = "echo 'Setup complete!'"

[tasks.lint]
description = "Run linters"
run = """
ruff check .
black --check .
mypy src/t2d_kit --ignore-missing-imports
"""

[tasks.format]
description = "Format code"
run = """
ruff check --fix .
black .
"""

[tasks.test]
description = "Run tests"
run = "pytest tests/"

[tasks.test-all]
description = "Run all tests (including failing ones)"
run = "pytest tests/ -v || true"

[tasks.test-cov]
description = "Run tests with coverage"
run = "pytest tests/test_smoke.py tests/unit/test_user_recipe_fixed.py --cov=src/t2d_kit --cov-report=term-missing"

[tasks.verify]
description = "Verify all tools are installed"
run = """
echo "Checking tools..."
python --version
node --version
go version
java -version
d2 --version || echo "d2 not installed - run: go install oss.terrastruct.com/d2"
mmdc --version || echo "mermaid-cli not installed - run: npm install -g @mermaid-js/mermaid-cli"
test -f ~/.local/bin/plantuml.jar && echo "PlantUML installed" || echo "PlantUML not installed - run: mise run setup-plantuml"
"""

[tasks.build]
description = "Build wheel and source distribution"
run = """
echo "🔨 Building t2d-kit wheel and source distribution..."
python -m build
echo "✅ Build complete! Files in dist/"
ls -lh dist/
"""

[tasks.build-wheel]
description = "Build only the wheel file"
run = """
echo "🔨 Building t2d-kit wheel..."
python -m build --wheel
echo "✅ Wheel build complete!"
ls -lh dist/*.whl
"""

[tasks.clean-build]
description = "Clean build artifacts and rebuild"
run = """
echo "🧹 Cleaning build artifacts..."
rm -rf build/ dist/ *.egg-info src/*.egg-info
echo "🔨 Building fresh wheel and source distribution..."
python -m build
echo "✅ Clean build complete!"
ls -lh dist/
"""

[tasks.test-wheel]
description = "Test the built wheel in a virtual environment"
run = """
echo "🧪 Testing wheel installation..."
python -m venv .test-venv
.test-venv/bin/pip install --quiet --upgrade pip
.test-venv/bin/pip install dist/*.whl
.test-venv/bin/python -c "import t2d_kit; print(f'✅ Successfully imported t2d_kit version {t2d_kit.__version__}')"
rm -rf .test-venv
echo "✅ Wheel test complete!"
"""

[tasks.publish-test]
description = "Publish to TestPyPI for testing"
run = """
echo "📤 Publishing to TestPyPI..."
python -m twine upload --repository testpypi dist/*
echo "✅ Published to TestPyPI!"
echo "Test installation with: pip install -i https://test.pypi.org/simple/ t2d-kit"
"""

[tasks.publish]
description = "Publish to PyPI (requires API token)"
run = """
echo "📤 Publishing to PyPI..."
python -m twine upload dist/*
echo "✅ Published to PyPI!"
echo "Install with: pip install t2d-kit"
"""

[tasks.mcp-inspect]
description = "Start MCP server with inspector for debugging"
run = """
echo "🔍 Starting t2d-kit MCP server with inspector..."
echo "📌 Inspector will be available at: http://localhost:5173"
echo ""
npx @modelcontextprotocol/inspector python -m t2d_kit.mcp.server
"""

[tasks.mcp-server]
description = "Start MCP server in stdio mode (for direct testing)"
run = """
echo "🚀 Starting t2d-kit MCP server..."
echo "Press Ctrl+C to stop"
python -m t2d_kit.mcp.server
"""

[tasks.mcp-test]
description = "Test MCP server functionality"
run = """
echo "🧪 Testing MCP server..."
python -c "
import asyncio
from t2d_kit.mcp.server import create_server_async

async def test():
    server = await create_server_async()
    print('✅ Server created successfully')

    # Get resources and tools
    resources = await server.get_resources()
    tools = await server.get_tools()

    print(f'📚 Resources: {len(resources)}')
    print(f'🛠️  Tools: {len(tools)}')

    # List resources
    print('\\n📦 Available Resources:')
    for resource in resources:
        if hasattr(resource, 'uri'):
            print(f'  - {resource.uri}: {resource.name}')
        else:
            print(f'  - {resource}')

    # List tools
    print('\\n🔧 Available Tools:')
    for tool in tools:
        if hasattr(tool, 'name'):
            desc = tool.description[:50] if hasattr(tool, 'description') else 'No description'
            print(f'  - {tool.name}: {desc}...')
        else:
            print(f'  - {tool}')

asyncio.run(test())
"
"""

[env]
PYTHONPATH = "src"
